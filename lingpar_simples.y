%{
#include <stdio.h>
#include <stdlib.h>

// Declara√ß√£o da fun√ß√£o yylex (gerada pelo Flex)
extern int yylex(void);

// Fun√ß√£o para reportar erros sint√°ticos
void yyerror(const char *s);

// Contador de erros
int error_count = 0;

// Fun√ß√£o para imprimir mensagens de sucesso
void print_success(const char *message);
%}

// Definir union para valores dos tokens
%union {
    int number;
    char *string;
}

// Definir os tokens (mesmos valores do Flex)
%token <string> IDENTIFIER STRING
%token <number> NUMBER
%token PROGRAM VAR PRINT END
%token ASSIGN PLUS MINUS MULTIPLY DIVIDE
%token EQUALS NOT_EQUALS GREATER_EQUALS LESS_EQUALS GREATER_THAN LESS_THAN
%token LEFT_PAREN RIGHT_PAREN LEFT_BRACE RIGHT_BRACE SEMICOLON

// Definir preced√™ncia dos operadores
%left PLUS MINUS
%left MULTIPLY DIVIDE
%left EQUALS NOT_EQUALS GREATER_EQUALS LESS_EQUALS GREATER_THAN LESS_THAN

// Definir o s√≠mbolo inicial
%start program

%%

/* Programa principal */
program:
    PROGRAM IDENTIFIER LEFT_BRACE statement_list RIGHT_BRACE END {
        print_success("Programa v√°lido!");
    }
    ;

/* Lista de comandos */
statement_list:
    /* vazio */
    | statement_list statement
    ;

/* Tipos de comandos */
statement:
    declaration
    | print_statement
    ;

/* Declara√ß√£o de vari√°veis */
declaration:
    VAR IDENTIFIER optional_assignment SEMICOLON {
        print_success("Declara√ß√£o de vari√°vel v√°lida");
    }
    ;

optional_assignment:
    /* vazio */
    | ASSIGN expression
    ;

/* Comando print */
print_statement:
    PRINT expression SEMICOLON {
        print_success("Comando print v√°lido");
    }
    ;

/* Express√µes simples */
expression:
    IDENTIFIER
    | NUMBER
    | STRING
    | expression PLUS expression
    | expression MINUS expression
    ;

%%

// Fun√ß√£o para reportar erros sint√°ticos
void yyerror(const char *s) {
    error_count++;
    printf("‚ùå Erro sint√°tico: %s\n", s);
}

// Fun√ß√£o para imprimir mensagens de sucesso
void print_success(const char *message) {
    printf("‚úÖ %s\n", message);
}

// Fun√ß√£o principal
int main(int argc, char *argv[]) {
    printf("=== Parser LingParERP ===\n");
    printf("Analisando programa...\n\n");
    
    int result = yyparse();
    
    if (result == 0 && error_count == 0) {
        printf("\nüéâ Programa v√°lido! An√°lise sint√°tica conclu√≠da com sucesso.\n");
    } else {
        printf("\n‚ùå Programa inv√°lido! %d erro(s) encontrado(s).\n", error_count);
    }
    
    return result;
}
